print 6
print(6)
print(6)
print(6,7)
v1 <- c(4, 5, 6)
v1
v1[0]
v1[1]
v1[2]
v1[3]
v1[-1]
v1[-2]
v1[-3]
v1[-4]
v1[-5]
v1[-6]
v1[-7]
v1[1:2]
v1[1:3]
v1[x<5]
v1[<5]
v1
print(v1)
v2 <- c(-1, -2, -3)
c(v1, v2)
array(c(v1,v2),dim(2,3))
array(c(v1,v2)
dim(c(1, 2, 3))
array(1, 2, 3)
array(1, 2, 3, dim=c(1))
array(1, 2, 3, dim
)
array(1, 2, 3, dim)
array(1, 2, 3, c(1,2))
array(1, 2, 3, dim=c(1,2))
array(1, 2, 3)
array(1, 2, 3,dimnames=c(1,2))
array(1, 2, 3,dim=c(1,2),dimnames=c("x","y"))
array(1:24, dim=c(3,4,2))
array(1:24, dim=c(1))
array(1:24, dim=c(24))
array(1, 2, 3, dim=c(1,3))
array(1, 2, 3, dim=c(3))
array(c(1, 2, 3), dim=c(3))
array(c(1, 2, 3, 4), dim=c(2,2))
array(c(1, 2, 3, 4), dim=c(2,2), dimnames=c("x","y"))
array(c(1, 2, 3, 4), dim=c(2,2), dimnames=list("x","y"))
array(c(1, 2, 3, 4), dim=c(2,2), dimnames=list("x","y","z","w"))
array(c(1, 2, 3, 4), dim=c(2,2), dimnames=list("x","y"))
list(1, 2)
list("x", "y2)
list("x", "y")
list("x", "y")
c("hello", 2)
c("hello", 2)[1]
c("hello", 2)[2]
list("hello", 2)
list("hello", 2)[1]
list("hello", 2)[2]
myFunc <- function() {}
myFunc()
myFunc <- function() {}
myFunc <- function() {
return(7)
}
myFunc
myFunc()
myShit <- myFunc
myShit()
4,5
4
print(4,5)
print(c(4,5)
)
myOtherFunc <- function(x=5) {
print(x+1)
}
myOtherFunc()
myOtherFunc(8)
myOtherFunc(x=21)
require(stats)
plot(card)
plot(cars)
cars
plot(sin, -pi, 2*pi)
plot
a <- list("hello", 4, 5.6)
a
a[1]
a[[1]]
seq(1, 2, 3)
seq(1,5,1)
seq(1,5,2)
seq(1,205,2)
seq(1,100,1)
array(seq(1,100,1),dim=c(50,2))
data <- array(seq(1,100,1),dim=c(50,2))
plot(data)
random()
random(2
)
rand(1)
randu
randu(2)
randu
randu[1]
randu[3]
randu[2]
randu[1]
randu
X = c(-1, -5, -3, 4, 7, 2, 3, -1, 0, 2)
Y = c(0.2, 0.3, -0.2, 1, 1.2, 0.5, 0.7, 0.9, 0.8, 0.7)
len(X)
X.length
length(X)
length(Y)
plot(X,Y)
mean(X)
mean(Y)
Xprime = X - mean(X)
Xprime
Yprime = Y-mean(Y)
Yprime
plot(Xprime, Yprime)
Yprime
X^2
X
sum(X^2)
1/(length(X)) * sum(X^2)
length("hello")
length(c("hello","bye")
)
strlen("hello")
plot(Xprime, Yprime, asp=1)
Xprimeprime = Xprime/((length(X)) * sum(X^2))
Yprimeprime = Yprime/((length(Y)) * sum(Y^2))
plot(Xprimeprime, Yprimeprime, asp=1)
ls()
4+3i
complex(2, 3)
complex(a=2,b=9
)
complex(real=2,imaginary=9)
as.complex(4)
exp(8)
exp(20)
1/exp(20)
name = c ("heisenberg", "schrödinger", "mandelbrot")
age = c(9,12,6)
myData = data.frame(name, age)
myData
myData$name
myData$age
myData["name"]
myData
myData[age < 10]
myData$name[age < 10]
myData
plot(myData$name, myData$age)
plot(myData)
x = c(3, 4, 5, 8, 13, 15, 21, 54, 31)
y = c(5, 7, 9, 8, 12, 16, 20, 21, 29)
plot(x,y)
x = c(3, 4, 5, 8, 13, 15, 21, 30, 31)
plot(x,y)
data = data.frame(x, y)
data
lm(data)
regre = lm(formula=data)
summary(regre)
abline(regre, col = "red")
abline
f <- function(x, y=10)
{}
f(5, 6)
f <- function(x, y=10) {
f = x + y
}
f
f(8)
f(8,10)
6
f <- function(x, y=10) {
return x + y
f <- function(x, y=10) {
return(x+y)
}
f(8,9)
f(8)
f(y=2,x=1)
print 5
print(5)
a <- c(1, 2, 3, 4)
a
for i in a {
for i in a
i <- a
i
import.packages("metaheuristicsOpt")
import.packages("metaheuristicOpt")
install.packages("metaheuristicsOpt")
install.packages("metaheuristicOpt")
a <- c(1, 2, 3)
b <- c(4, 5, 6)
myData$X <- a
myData$Y <- b
myData$Color <- c(1, 2, 2)
ggplot(aes(x=myData$X, y=myData$Y))
library(rpart)
Kyphosis
kyphosis
kyphosis$Age
kyphosis~Age
Number
Start
c <- y ~ x
class(c)
class(6)
c(1, 2, 3)
array(c(1, 2, 3))
for i <- c(1, 2, 3) {}
for i <- c(1, 2, 3) {
for i in c(1, 2, 3) {
for (i in c(1, 2, 3)) {
print (i)
}
for (i <- c(1, 2, 3)) {
for (i in c(1, 2, 3)) {
}
0 to 10
0:10
for i in c(1, 2, 3) {
for(i in c(1, 2, 3)) {
print(i)
}
class(8.9)
class("shit")
class('2')
class(c())
class(c(2))
class(Array(c(2))
)
class(array(c(2))
a<-array(c(2,3))
a<-array(c(2,3))
a
class(a)
a<-c(2,3)
class(a)
typeof(4)
typeof(4.0)
typeof("shit")
typeof(9)
typeof(c(1,2))
typeof(array(c(1,2)))
list(1, 2, 3)
list(c(1,2,3))
dim(3)
dim(array(1, 2, 3))
dim(array(c(1, 2, 3)))
ggplot2
library(ggplot2)
ggplot3
ggplot2
plot(list(1, 2, 3), list(3, 4, 5))
plot(list(1, 2, 3), list(3, 4, 5), type='l')
e<- ~x+y+z
e
class(e)
length(e)
as.double("shit")
as.double("555")
as.formula("y ~ x")
lapply(c(1,2,3), x => x + 1)
lapply(c(1,2,3), function(x) x + 1)
Map(c(1,2,3), function(x) x+1)
Map(function(x) x+1, c(1, 2, 3))
data.frame(shit = 4, shoot = 5)
data.frame(shit = c(4, 7, 6), shoot = c(5, 6, 1)
)
c(1, 2, 3)[1]
d <- data.frame(Nombre = List("alice", "bob"))
d <- data.frame(Nombre = c("alice", "bob"))
d <- data.frame(Nombre = c("alice", "bob"), Edad = c(41, 52))
d$Nombre
d$Edad
data <- data.frame(y = c(1, 2, 3), x1 = c(8, 10, 11), x2 = c(10, 11, 15))
data
lm(data)
lm(formula = y ~ x1, data = data)
lm(formula = y ~ x2, data = data)
lm(formula = y ~ x1 + x2, data = data)
lm(formula = y ~ x1 + x2 + x2^2, data = data)
7^2
8^2
lm(formula = y ~ x1 + x2 + I(x2^2), data = data)
lm(formula = y ~ x1 + I(x2^2), data = data)
library(rpart)
library(igraph)
install.packages("igraph")
library(igraph)
fit <- rpart(Kyphosis ~ Age + Number + Start, method="class", data=kyphosis)
fit
summary(fit)
fit
printcp(fit)
clear
printcp(fit)
plotcp(fit)
summary(c(1,2,3))
summary(fit)
plot(fit)
plot(fit, uniform=TRUE, main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
kyphosis
post(fit)
mpg
data.mpg
mpg
library(mpg)
data(mpg)
data(mtcars)
mpg
mtcars
summary(mtcars)
mtcars
carstree <- rpart(formula = mpg ~ cyl + hp + gear, data=mtcars)
plot(carstree)
plot(carstree, uniform=TRUE)
plot(carstree, uniform=FALSE)
plot(carstree, uniform=TRUE, main="MPG prediction")
text(carstree, use.n=TRUE, all=TRUE, cex=.8)
prp
install.packages("prp")
carstree <- rpart(formula = mpg ~ ., data=mtcars)
plot(carstree, uniform=TRUE, main="MPG prediction")
text(carstree, use.n=TRUE, all=TRUE, cex=.8)
carstree <- rpart(formula = mpg ~ ., data=mtcars)
plot(carstree, uniform=TRUE, main="MPG prediction")
text(carstree, use.n=TRUE, all=TRUE, cex=.8)
df ← data.frame(y = c(1, 2, 3), x1 = c(3, 4, 5), x2 = c(7, 8, 9))
df ← data.frame(y = c(1, 2, 3), x1 = c(3, 4, 5), x2 = c(7, 8, 9))
df <- data.frame(y = c(1, 2, 3), x1 = c(3, 4, 5), x2 = c(7, 8, 9))
df
lm(formula = y ~ x1, data = df)
lm(formula = x1 ~ y, data = df)
a <- 6 # a simple assignation
a
b <- lm(formula = y ~ x1)
b <- lm(formula = y ~ x1, data = df)
summary(b)
library(whatif)
install.packages("whatif")
install.packages("WhatIf")
library(WhatIf)
my.cfact <- matrix(rnorm(3*5), ncol=5)
my.cfact
my.data <- matrix(rnorm(100*5), ncol=5)
my.data
my.result <- whatif(data = my.data, cfact = my.cfact, mc.cores = 1)
my.result
plot.whatif(my.resulkt)
plot.whatif(my.result)
print.whatif
whatif
library(plot.whatif)
library(plot.WhatIf)
whatif.plot
plot(my.result)
require(lpSolve)
library(lpSolve)
C <- c(30, 40, 80)
A <- matrix(c(1, 1, -10, 4, 3, -20, 1, 0, -2, 1, 1, 0), nrow=4, byrow=TRUE)
A
B <- c(500, 200, 100, 1000)
constraints_direction <- c("<=", "<=
", "<=", ">=")
constraints_direction
constraints_direction <- c("<=", "<=", "<=", ">=")
constraints_direction
optimum <- lp(direction="main", objective.in = C, const.mat = A, const.dir = constraints_direction, const.rhs = B, all.int = TRUE)
optimum <- lp(direction="min", objective.in = C, const.mat = A, const.dir = constraints_direction, const.rhs = B, all.int = TRUE)
print(optimum$status)
optimum$solution
matrix(c(1,1,2,2), nrows=2)
matrix(c(1,1,2,2), rows=2)
matrix(c(1,1,2,2), 2)
matrix(c(1,1,2,2), nrow=2)
setwd("/Users/remilia/code/AdvancedAnalyticsCourse/Linear Regression")
setwd("/Users/remilia/code/AdvancedAnalyticsCourse/Linear\ Regression")
setwd("/Users/remilia/code/AdvancedAnalyticsCourse/")
setwd("/Users/remilia/code/AdvancedAnalyticsCourse/LinearRegression")
setwd("/Users/remilia/code/AdvancedAnalyticsCourse/LinearRegression")
getwd()
setwd("/Users/remilia/code/AdvancedAnalyticsCourse/LinearRegression")
data <- read.csv("boston_data.csv")
data
lm(medv ~ crim + nox + discoveries)
lm(medv ~ crim + nox + discoveries, data)
lm(formula = medv ~ crim + nox + discoveries, data = data)
lm(formula = medv ~ crim + nox + dis, data = data)
model <- lm(formula = medv ~ crim + nox + dis, data = data)
plot(model)
model
summary(model)
abline(mnode)
abline(model)
plot(model)
summary(model)
fit <- lm(formula = medv ~ crim, data = data)
plot(fit)
summary(fit)
plot(data$crim, data$medv)
abline(23.79, -0.39)
abline(23.79, -0.39, col="red")
